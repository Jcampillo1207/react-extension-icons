"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
function XmlIconColor(props) {
    return React.createElement("svg", __assign({ xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 201 240", width: "1em", height: "1em" }, props),
        React.createElement("g", { clipPath: "url(#a)" },
            React.createElement("path", { fill: "#A140FF", d: "M140.1 49.24C134.633 49.2347 129.391 47.0606 125.525 43.1947C121.66 39.3288 119.485 34.0871 119.48 28.62V0H27.3401C20.2031 0 13.3584 2.83514 8.31177 7.88174C3.26516 12.9283 0.429932 19.773 0.429932 26.91V189.13C0.44053 196.26 3.28047 203.094 8.32593 208.132C13.3714 213.17 20.21 216 27.3401 216H137.94C145.077 216 151.922 213.165 156.968 208.118C162.015 203.072 164.85 196.227 164.85 189.09V49.24H140.1Z", opacity: 0.3 }),
            React.createElement("path", { fill: "#A140FF", d: "M164.85 49.24H140.1C134.633 49.2347 129.391 47.0606 125.525 43.1947 121.66 39.3288 119.485 34.0871 119.48 28.62V0L164.85 49.24ZM184.37 170.6H59.3301C50.4604 170.6 43.27 177.79 43.27 186.66V223.94C43.27 232.81 50.4604 240 59.3301 240H184.37C193.24 240 200.43 232.81 200.43 223.94V186.66C200.43 177.79 193.24 170.6 184.37 170.6Z" }),
            React.createElement("path", { fill: "#fff", d: "M81.27 213.37V220.64H73.74V213.37H81.27ZM103.3 220.64 96.96 211.28 91.52 220.64H83.1799L92.8 205.16 82.8899 190.57H91.52L97.6899 199.63 103 190.57H111.3L101.81 205.71 111.94 220.64H103.3ZM148.56 190.78V220.64H141.28V202L134.82 220.67H128.52L122.02 201.96V220.67H114.74V190.81H123.63L131.76 211.61 139.71 190.81 148.56 190.78ZM160.85 215.07H170.55V220.64H153.55V190.57H160.83L160.85 215.07Z" }),
            React.createElement("path", { fill: "#A140FF", d: "M40.94 114.19C40.9261 113.76 41.0564 113.338 41.3101 112.99 41.6134 112.6 41.978 112.263 42.3899 111.99 43.0137 111.667 43.6587 111.387 44.3201 111.15L46.25 110.35 53.97 107.1C55.0433 106.6 57.0433 105.767 59.97 104.6L63.6399 103.1 64.96 102.63 65.19 102.53C65.2526 102.517 65.3173 102.517 65.3799 102.53 65.528 102.465 65.6882 102.431 65.8501 102.43 66.1599 102.413 66.4697 102.458 66.7617 102.563 67.0537 102.668 67.3219 102.83 67.5501 103.04 67.7436 103.222 67.8975 103.442 68.0025 103.687 68.1074 103.931 68.161 104.194 68.1599 104.46V107C68.1504 107.471 68.0046 107.93 67.74 108.32 67.4618 108.756 67.0468 109.086 66.5601 109.26L50.7901 115.71 66.5601 122.16C67.0296 122.354 67.4374 122.672 67.74 123.08 68.0149 123.454 68.1621 123.906 68.1599 124.37V126.91C68.1602 127.179 68.1063 127.445 68.0015 127.692 67.8967 127.94 67.7433 128.163 67.5501 128.35 67.3256 128.567 67.0585 128.735 66.7659 128.843 66.4733 128.951 66.1616 128.998 65.8501 128.98 65.6894 128.978 65.53 128.948 65.3799 128.89L64.96 128.75 63.6399 128.28 60 126.8 54 124.31 46.2801 121.06 44.3501 120.26C43.7301 120.01 43.0799 119.73 42.4199 119.41 42.0104 119.219 41.6597 118.922 41.4046 118.549 41.1495 118.176 40.9994 117.741 40.97 117.29L40.94 114.19ZM88.05 131.7C87.5496 131.712 87.0548 131.592 86.6157 131.351 86.1767 131.111 85.809 130.759 85.55 130.33 85.3352 130.022 85.1636 129.685 85.04 129.33L84.71 128.44 77.51 112.53 76.99 111.35C76.39 110.07 75.23 107.53 73.51 103.73 71.2767 98.8968 70.1599 96.2467 70.1599 95.7801 70.1602 95.4989 70.2244 95.2214 70.3474 94.9685 70.4704 94.7156 70.6491 94.494 70.8701 94.3201 71.3691 93.8983 72.0069 93.6772 72.6599 93.7001H75C75.493 93.6916 75.9795 93.8139 76.4099 94.0545 76.8403 94.2952 77.1991 94.6456 77.45 95.0701L77.97 96.0701 78.3 96.9601 80.1799 101.1 85.5 112.87 86.2 114.37 89.5 121.62C90.7651 124.221 91.8803 126.892 92.8401 129.62 92.8383 129.9 92.7736 130.175 92.6506 130.426 92.5277 130.677 92.3496 130.897 92.1299 131.07 91.6314 131.493 90.9932 131.714 90.3401 131.69L88.05 131.7ZM96.7599 129C96.4406 129.021 96.1203 128.976 95.8192 128.867 95.5182 128.759 95.2427 128.59 95.0099 128.37 94.6252 127.989 94.406 127.472 94.3998 126.93V124.39C94.3953 123.929 94.5353 123.478 94.8 123.1 95.0991 122.68 95.517 122.36 95.9999 122.18L111.82 115.73 95.9999 109.29C95.5196 109.08 95.1125 108.732 94.83 108.29 94.5574 107.911 94.4072 107.457 94.3998 106.99V104.41C94.3965 104.146 94.4481 103.885 94.5514 103.642 94.6547 103.399 94.8075 103.181 94.9999 103 95.47 102.577 96.0884 102.358 96.7199 102.39 96.8661 102.388 97.0104 102.422 97.1398 102.49 97.2258 102.475 97.3138 102.475 97.3998 102.49L97.61 102.59C97.55 102.59 97.9698 102.71 98.8798 103.06L102.6 104.56C102.407 104.473 104.407 105.307 108.6 107.06 110.887 108 113.507 109.113 116.46 110.4L117.21 110.68 118.29 111.11C118.926 111.336 119.542 111.617 120.13 111.95 120.55 112.142 120.909 112.446 121.166 112.829 121.424 113.212 121.571 113.659 121.59 114.12V117.22C121.581 117.645 121.441 118.057 121.19 118.4 120.911 118.788 120.549 119.109 120.13 119.34 119.56 119.62 118.89 119.92 118.13 120.24L116.13 121.04 98.7099 128.33C98.2099 128.58 97.91 128.74 97.82 128.8L97.6298 128.94 96.7599 129Z" })),
        React.createElement("defs", null,
            React.createElement("clipPath", { id: "a" },
                React.createElement("path", { fill: "#fff", d: "M0 0H200V240H0z", transform: "translate(.43)" }))));
}
exports.default = XmlIconColor;
